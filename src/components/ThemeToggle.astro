---
// Define the props for the component
interface Props {
  id?: string;
  ariaLabel?: string;
}

// Destructure the props with defaults
const { 
  id = "theme-toggle", 
  ariaLabel = "Toggle theme" 
} = Astro.props;
---

<button id={id} aria-label={ariaLabel} class="theme-toggle">
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon-sun"><circle cx="12" cy="12" r="5"></circle><line x1="12" y1="1" x2="12" y2="3"></line><line x1="12" y1="21" x2="12" y2="23"></line><line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line><line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line><line x1="1" y1="12" x2="3" y2="12"></line><line x1="21" y1="12" x2="23" y2="12"></line><line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line><line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line></svg>
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon-moon"><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path></svg>
</button>

<script>
  // Add event listener to the theme toggle button
  document.addEventListener('DOMContentLoaded', () => {
    const themeToggle = document.getElementById('theme-toggle');
    if (themeToggle) {
      themeToggle.addEventListener('click', () => {
        if (typeof window.toggleTheme === 'function') {
          window.toggleTheme();
        }
      });
    }
  });
</script>

<style>
  .theme-toggle {
    width: 45px;
    height: 45px;
    border-radius: 50%;
    background-color: var(--color-bg);
    color: var(--color-primary);
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.05);
    cursor: pointer;
    position: relative;
    overflow: hidden;
  }
  
  .theme-toggle:hover {
    color: white;
    background: linear-gradient(135deg, var(--color-primary), var(--color-accent));
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
  }
  
  .theme-toggle svg {
    width: 20px;
    height: 20px;
    position: absolute;
    transition: transform 0.3s ease, opacity 0.3s ease;
  }
  
  .theme-toggle .icon-sun {
    opacity: 0;
    transform: scale(0);
  }
  
  .theme-toggle .icon-moon {
    opacity: 1;
    transform: scale(1);
  }
  
  :global(html.light) .theme-toggle .icon-sun {
    opacity: 1;
    transform: scale(1);
  }
  
  :global(html.light) .theme-toggle .icon-moon {
    opacity: 0;
    transform: scale(0);
  }
  
  :global(html.dark) .theme-toggle {
    border-color: rgba(255, 255, 255, 0.1);
  }
  
  @media (max-width: 576px) {
    .theme-toggle {
      width: 40px;
      height: 40px;
    }
    
    .theme-toggle svg {
      width: 18px;
      height: 18px;
    }
  }
</style> 